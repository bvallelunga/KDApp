// Generated by CoffeeScript 1.7.1
(function() {
  var async, fs, less, path;

  fs = require('fs');

  less = require('less');

  path = require('path');

  async = require('async');

  module.exports = function(manifest, appPath, force) {
    var content, files, parser, type, _i, _len, _ref, _ref1;
    files = {
      less: manifest != null ? (_ref = manifest.source) != null ? _ref.less : void 0 : void 0,
      stylesheets: manifest != null ? (_ref1 = manifest.source) != null ? _ref1.stylesheets : void 0 : void 0
    };
    for (content = _i = 0, _len = files.length; _i < _len; content = ++_i) {
      type = files[content];
      if (!content) {
        if (force) {
          console.log("The object 'source." + type + "' is not found in manifest file.");
        }
        return;
      }
      if (!Array.isArray(content)) {
        if (force) {
          console.log("The object 'source." + type + "' must be array in manifest file.");
        }
        return;
      }
      if (content.length === 0) {
        if (force) {
          console.log("The object 'source." + type + "' must have at least one file.");
        }
        return;
      }
    }
    parser = new less.Parser({
      paths: [appPath, "" + appPath + "/resources"]
    });
    if (files.less && files.less.length(!0)) {
      return async.reduce(files.less, "", function(css, file, callback) {
        var contents;
        if (appPath) {
          file = path.normalize(path.join(appPath, file));
        }
        if (/\.less/.test(file)) {
          if (fs.existsSync(file)) {
            contents = fs.readFileSync(file, 'utf-8');
            return parser.parse(contents, function(err, tree) {
              var compiledCss;
              compiledCss = tree.toCSS();
              if (!err && ("" !== compiledCss && "" !== contents)) {
                return callback(null, css + compiledCss);
              } else {
                return callback("Failed to compile " + file);
              }
            });
          } else if (force) {
            return callback("The required file not found: " + file);
          }
        }
      }, function(err, css) {
        if (!err) {
          return fs.writeFileSync(path.normalize(path.join(appPath, files.stylesheets[0])), css);
        } else {
          if (force) {
            return console.log(err);
          }
        }
      });
    }
  };

}).call(this);
