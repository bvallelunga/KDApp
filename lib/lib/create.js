// Generated by CoffeeScript 1.7.1
(function() {
  var Applause, Create, fs;

  fs = require('fs-extra');

  Applause = require('applause');

  Create = (function() {
    function Create(user, app, path, root) {
      this.user = user;
      this.path = path;
      this.root = root;
      this.appName = app;
    }

    Create.prototype.capitalize = function(string) {
      return (string.split(' ').map(function(word) {
        return word[0].toUpperCase() + word.slice(1).toLowerCase();
      })).join(' ');
    };

    Create.prototype.nameify = function(string) {
      return string.replace(' ', '');
    };

    Create.prototype.app = function() {
      var app, appCap, appLower, destApp, skelApp, tempApp, userCap, userLower;
      app = this.capitalize(this.appName);
      appLower = this.nameify(this.appName.toLowerCase());
      appCap = this.nameify(this.capitalize(this.appName));
      userLower = this.user.toLowerCase();
      userCap = this.capitalize(this.user);
      skelApp = "" + this.root + "/apps/Skeleton.kdapp";
      tempApp = "/tmp/" + appCap + ".kdapp";
      destApp = "" + this.path + "/" + appCap + ".kdapp";
      return fs.copy(skelApp, tempApp, (function(_this) {
        return function(err) {
          var applause, contents, file, files, result, _i, _len;
          if (!err) {
            applause = Applause.create({
              variables: {
                'a': app,
                'al': appLower,
                'ac': appCap,
                'u': _this.user,
                'ul': userLower,
                'uc': userCap
              }
            });
            files = ["ChangeLog", "README.md", "index.coffee", "manifest.json", "resources/style.css"];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              file = files[_i];
              contents = fs.readFileSync("" + tempApp + "/" + file, 'utf8');
              result = applause.replace(contents);
              fs.writeFileSync("" + tempApp + "/" + file, result);
            }
            return fs.move(tempApp, destApp, function(err) {
              if (err) {
                fs.removeSync(tempApp);
                return console.log("Failed to create " + appCap + ".kdapp");
              }
            });
          } else {
            return console.log("Failed to create " + appCap + ".kdapp");
          }
        };
      })(this));
    };

    return Create;

  })();

  module.exports = Create;

}).call(this);
