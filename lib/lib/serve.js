// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Exec, Serve, fs, watch,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs-extra');

  watch = require('node-watch');

  Exec = require('child_process');

  EventEmitter = require('events').EventEmitter;

  Serve = (function(_super) {
    __extends(Serve, _super);

    function Serve(manifest, user, path, previewUrl) {
      this.manifest = manifest;
      this.user = user;
      this.path = path;
      this.previewUrl = previewUrl;
      this.webFolder = "/home/" + this.user + "/Web";
      this.appFolder = "" + this.webFolder + "/" + manifest.name + ".kdapp";
    }

    Serve.prototype.start = function(cb) {
      return Exec.exec("mkdir -p " + this.webFolder + "\nmkdir -p " + this.appFolder + "\nln -s --force " + this.path + "/index.js " + this.appFolder + "/index.js\nln -s --force " + this.path + "/resources/style.css " + this.appFolder + "/style.css", (function(_this) {
        return function(err) {
          var message, stdin;
          if (!err) {
            _this.emit("compile");
            message = "\nStarting app server...\nListening on " + _this.previewUrl + "?app=" + _this.manifest.name + "\n\nctrl-c to stop the server\n  ";
            stdin = process.stdin;
            stdin.setRawMode(true);
            stdin.resume();
            stdin.setEncoding('utf8');
            stdin.on('data', function(key) {
              if (key === '\u0003') {
                Exec.exec("rm -r --force " + _this.appFolder, process.exit);
              }
              return process.stdout.write(key);
            });
            cb();
          } else {
            message = "Failed to start app server";
          }
          return console.log(message);
        };
      })(this));
    };

    Serve.prototype.watch = function(compile) {
      var excludeFiles;
      excludeFiles = ["" + this.path + "/index.js", "" + this.path + "/resources/style.css"];
      watch(this.path, {
        recursive: true,
        followSymLinks: true
      }, (function(_this) {
        return function(filename) {
          if (__indexOf.call(excludeFiles, filename) < 0) {
            return _this.emit("compile");
          }
        };
      })(this));
      return console.log("Started watching for changes");
    };

    return Serve;

  })(EventEmitter);

  module.exports = Serve;

}).call(this);
