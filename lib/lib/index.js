// Generated by CoffeeScript 1.7.1
(function() {
  var Coffee, Create, Less, Lib, Serve, fs, path;

  fs = require('fs-extra');

  path = require('path');

  Coffee = require('./coffee');

  Less = require('./less');

  Serve = require('./serve');

  Create = require('./create');

  Lib = (function() {
    function Lib(config, program) {
      this.program = program;
      this.path = process.env.PWD;
      this.user = process.env.LOGNAME;
      this.root = path.resolve(__dirname, '../../');
      if (config.production) {
        this.previewUrl = "https://koding.com/Preview";
      } else {
        this.previewUrl = "https://koding.com/bvallelunga/Apps/Preview";
      }
    }

    Lib.prototype.getManifest = function() {
      var error, manifestPath;
      manifestPath = "" + this.path + "/manifest.json";
      try {
        return JSON.parse(fs.readFileSync(manifestPath));
      } catch (_error) {
        error = _error;
        if (error.errno === 34) {
          console.log("Manifest file does not exists: " + manifestPath);
        } else {
          console.log("Manifest file seems corrupted: " + manifestPath);
        }
        return process.exit(error.errno || 3);
      }
    };

    Lib.prototype.create = function(app, options) {
      var create;
      if (!app) {
        return this.help();
      }
      create = new Create(this.user, app, this.path, this.root);
      return create.app();
    };

    Lib.prototype.compile = function(type) {
      var manifest;
      manifest = this.getManifest();
      if (type) {
        switch (type) {
          case "coffee":
            return Coffee(manifest, this.path);
          case "less":
            return Less(manifest, this.path, true);
        }
      } else {
        Coffee(manifest, this.path);
        return Less(manifest, this.path);
      }
    };

    Lib.prototype.publish = function(env, options) {
      this.getManifest();
      if (env === "store") {
        return console.log("Please make sure all changes have been committed to github.\n\nTo finish publishing: " + this.previewUrl + "?publish=production&path=" + this.path);
      } else {
        return console.log("To finish publishing: " + this.previewUrl + "?publish=test&path=" + this.path);
      }
    };

    Lib.prototype.serve = function(options) {
      var manifest, serve;
      manifest = this.getManifest();
      serve = new Serve(manifest, this.user, this.path, this.previewUrl);
      this.compile();
      return serve.start((function(_this) {
        return function() {
          if (options.watch) {
            serve.watch();
          }
          return serve.on("compile", _this.compile.bind(_this));
        };
      })(this));
    };

    Lib.prototype.help = function() {
      return this.program.help();
    };

    return Lib;

  })();

  module.exports = function(options) {
    return new Lib(options);
  };

}).call(this);
